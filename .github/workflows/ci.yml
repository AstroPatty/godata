# This file is autogenerated by maturin v1.2.3
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
    paths:
      - "godata/**"
      - "src/**"
      - "tests/**"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux_build_server:
    name: Build server on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - run: cargo install cross --git https://github.com/cross-rs/cross
      - run: cross build --release --target ${{ matrix.target }} 

      - name: zip artifact
        run: zip -j godata_server-${{ matrix.target }}.zip  target/${{ matrix.target }}/release/godata_server
      - uses: actions/upload-artifact@v4
        with:
          name: godata_server-${{ matrix.target }}
          path: godata_server-${{ matrix.target }}.zip 

  mac_build_server:
    name: Build server on macOS
    runs-on: macos-latest
      
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - run: cargo build --release --target ${{ matrix.target }} 
      - name: zip artifact
        run: zip -j godata_server-${{ matrix.target }}.zip target/${{ matrix.target }}/release/godata_server

      - uses: actions/upload-artifact@v4
        with:
          name: godata_server-${{ matrix.target }}
          path: godata_server-${{ matrix.target }}.zip

  test_linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    outputs:
      godata_version: ${{ steps.get_godata_version.outputs.version }}
    needs: [linux_build_server]
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: godata_server-${{ matrix.target }}
          path: server
      - name: unzip artifact
        run: unzip -j server/godata_server-${{ matrix.target }}.zip -d server
      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install godata
        run: poetry install --with test
      - name: Run tests
        run: |
          export DATA_PATH=$(pwd)/tests/test_io/test_data/
          chmod +x ./server/godata_server
          mkdir -p /home/runner/.local/bin
          sudo mv ./server/godata_server /home/runner/.local/bin/ 
          cd tests
          sudo -E bash -c '/home/runner/.local/bin/poetry run pytest'
      - name: output godata version
        id: get_godata_version
        run: |
          echo "version=$(godata_server --version)" >> "$GITHUB_OUTPUT"
        
  test_mac:
    name: test on macOS
    runs-on: macos-latest
    needs: [mac_build_server]
    strategy:
      matrix:
        target: [x86_64-apple-darwin]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: godata_server-${{ matrix.target }}
          path: server
      - name: unzip artifact
        run: unzip -j server/godata_server-${{ matrix.target }}.zip -d server
  
      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install godata
        run: poetry install --with test
      - name: Run tests
        run: |
          export DATA_PATH=$(pwd)/tests/test_io/test_data/
          chmod +x ./server/godata_server
          sudo mv ./server/godata_server /Users/runner/.local/bin
          cd tests
          sudo -E bash -c 'poetry run pytest'

  check_tags:
    name: check tags
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test_mac, test_linux]
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: get commit tag
        id: get_tag
        uses: olegtarasov/get-tag@v2.1.2
        with: 
          tagRegex: '(\d+\.\d+\.\d+)'
      - name: compare tags
        id: compare_tag
        run: |
          if [ "${{ steps.get_tag.outputs.tag }}" != "${{ needs.test_linux.outputs.godata_version }}" ]; then
            echo "Tag mismatch: ${{ steps.get_tag.outputs.tag }} != ${{ needs.test_linux.outputs.godata_version }}"
            exit 1
          fi

  upload_binary:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check_tags]
    steps:
      - name: get tag name
        id: get_tag
        uses: olegtarasov/get-tag@v2.1.2
        with: 
          tagRegex: '(\d+\.\d+\.\d+)'

      - name: create directory
        run: |
          mkdir -p artifact
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifact
      - name: create single archive
        run: zip -r -j godata_server-${{ steps.get_tag.outputs.tag }}.zip artifact/*
      - uses: hkusu/s3-upload-action@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          aws-region: us-west-2
          file-path: './godata_server-${{ steps.get_tag.outputs.tag }}.zip'
          bucket-root: '/'
          destination-dir: '/'
          output-file-url: 'false'
  release-pypi:
    name: release
    needs: [check_tags]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: build and publish to pypi
        uses: JRubics/poetry-publish@v2.0
        with:
          pypi_token: ${{ secrets.PYPI_API_KEY }}
          ignore_dev_requirements: true
  release-github:
    name: release-github
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [upload_binary, release-pypi]
    permissions:
        contents: write

    steps:
    - name: "Build Changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v4.1.1
    - uses: actions/download-artifact@v4
    - uses: ncipollo/release-action@v1.13.0
      with:
        token: ${{ secrets.RELEASE_TOKEN }}
        body: ${{ steps.build_changelog.outputs.changelog }}

            
